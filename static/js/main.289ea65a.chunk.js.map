{"version":3,"sources":["libs/ethereum.ts","states/expore/reducer.ts","config.ts","services/index.ts","libs/web3.ts","states/hooks.ts","hooks/contracts.tsx","components/Card.tsx","libs/metamask.ts","routes.ts","pages/expore.tsx","pages/myItem.tsx","components/Appbar.tsx","App.tsx","states/test/reducer.ts","states/index.ts","reportWebVitals.ts","index.tsx","../node_modules/magic-sdk/dist/es sync"],"names":["ChainId","getEtherContract","contractDefinition","address","a","window","ethereum","provider","ethers","providers","Web3Provider","getNetwork","network","Number","parseInt","production","chainId","signer","getSigner","contract","Contract","initialState","nfts","mynfts","exporeSlice","createSlice","name","reducers","setNFTs","state","action","payload","clearNFTs","setMyNFTs","clearMyNFTs","actions","exporeReducer","reducer","config","marketContractAddress","nftContractAddress","loadNFTs","market","nft","marketContract","ntfContract","fetchMarketItems","marketItems","Promise","all","map","mark","i","tokenURI","tokenId","tokenUri","query","Moralis","Query","equalTo","itemId","toNumber","find","res","data","JSON","parse","get","item","price","toString","seller","owner","image","description","items","console","log","loadMyNFTs","fetchMyNfts","contractEvent","useAppDispatch","useDispatch","useAppSelector","useSelector","useContractJson","useState","potatoMarketContract","setPotatoMarketContract","NFTContract","setNFTContract","useEffect","axios","then","val","json","CardItem","isForSale","dispatch","handleClick","utils","formatUnits","createMarketSale","value","gasLimit","gasPrice","wait","Card","sx","maxWidth","CardHeader","avatar","Avatar","bgcolor","red","IconButton","title","CardMedia","component","height","CardContent","Box","CardActions","disableSpacing","Stack","direction","spacing","Button","variant","endIcon","ShoppingCart","onClick","getWeb3Provider","Web3","getChainId","eth","net","getId","getMetamask","request","method","accounts","getMetamaskAccount","chainChanged","callback","on","routes","path","element","expore","getNFTsData","useCallback","id","p","flexGrow","Grid","container","e","lg","ac","MyAppBar","useMoralis","authenticate","isAuthenticated","isAuthenticating","user","account","logout","formInput","faker","company","companyName","commerce","productDescription","fileTarget","setFileTarget","saveFile","useMoralisFile","createMarket","type","saveIPFS","onSuccess","result","url","ipfs","createSale","onError","error","mintToken","tx","event","events","args","stringify","obj","Object","set","save","parseUnits","getListingPrice","listingPrice","makeMarketItem","undefined","AppBar","position","Container","Toolbar","disableGutters","Typography","noWrap","mr","display","xs","md","page","to","my","color","onChange","target","files","Tooltip","process","signingMessage","catch","alt","src","App","serverUrl","appId","testSlice","toogle","updateToggle","testReducer","store","configureStore","test","setupListeners","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","AppWrapper","StrictMode","ReactDOM","createRoot","document","getElementById","render","webpackEmptyContext","req","Error","code","keys","resolve","module","exports"],"mappings":"ipBAEYA,E,mQAAAA,K,WAAAA,E,oBAAAA,M,KAKL,IAAMC,EAAgB,uCAAG,WAC9BC,EACAC,GAF8B,yBAAAC,EAAA,yDAKC,qBAApBC,OAAOC,SALY,0BAMPD,OAAbC,EANoB,EAMpBA,SACFC,EAAW,IAAIC,IAAOC,UAAUC,aAAaJ,GAPvB,SASNC,EAASI,aATH,UAStBC,EATsB,OAUxBC,OAAOC,SAAgEd,EAAQe,cAAgBH,EAAQI,QAV/E,wBAWpBC,EAASV,EAASW,YAClBC,EAAW,IAAIX,IAAOY,SAASjB,EAASD,EAAkB,IAASe,GAZ/C,kBAanBE,GAbmB,iCAgBvB,MAhBuB,4CAAH,wD,QCUhBE,EAA4B,CACvCC,KAAM,GACNC,OAAQ,IAGJC,EAAcC,YAAY,CAC9BC,KAAM,OACNL,eACAM,SAAU,CACRC,QADQ,SACAC,EAAOC,GACbD,EAAMP,KAAOQ,EAAOC,SAEtBC,UAJQ,SAIEH,GACRA,EAAMP,KAAOD,EAAaC,MAE5BW,UAPQ,SAOEJ,EAAOC,GACfD,EAAMN,OAASO,EAAOC,SAExBG,YAVQ,SAUIL,GACVA,EAAMP,KAAOD,EAAaE,WAOzB,EAAuDC,EAAYW,QAA3DP,EAAR,EAAQA,QAAoBK,GAA5B,EAAiBD,UAAjB,EAA4BC,WACtBG,GADN,EAAuCF,YACjBV,EAAYa,S,kBCrC5BC,EAAkB,CAC7BC,sBAAkF,6CAClFC,mBAA+E,8CCFpEC,EAAQ,uCAAG,WAAOC,EAA6BC,GAApC,uBAAAvC,EAAA,sEACQH,EAC5ByC,EACAJ,EAAOC,uBAHa,cAChBK,EADgB,gBAKK3C,EAAiB0C,EAAKL,EAAOE,oBALlC,cAKhBK,EALgB,uBAMKD,QANL,IAMKA,OANL,EAMKA,EAAgBE,mBANrB,sJAM4C,GAN5C,eAMhBC,EANgB,eAQFC,QAAQC,IAC1BF,EAAYG,IAAZ,iCAAAC,MAAgB,WAAOC,GAAP,uBAAAhD,EAAA,6EACSyC,QADT,IACSA,OADT,EACSA,EAAaQ,SAASD,EAAEE,SADjC,cACRC,EADQ,QAGRC,EAAQ,IAAIC,IAAQC,MAAM,oBAC1BC,QAAQ,SAAUP,EAAEQ,OAAOC,YAJnB,SAKIL,EAAMM,OALV,cAKRC,EALQ,OAMRC,EAAOC,KAAKC,MAAMH,EAAI,GAAGI,IAAI,SAE7BC,EAAiB,CACrBC,MAAOjB,EAAEiB,MAAMC,WACfV,OAAQR,EAAEQ,OAAOC,WACjBU,OAAQnB,EAAEmB,OACVC,MAAOpB,EAAEoB,MACTC,MAAOlB,EACP7B,KAAMsC,EAAI,KACVU,YAAaV,EAAI,aAfL,kBAiBPI,GAjBO,4CAAhB,wDAToB,eAQhBO,EARgB,OA6BtBC,QAAQC,IAAR,qBAA0BF,IA7BJ,kBA8BfA,GA9Be,4CAAH,wDAiCd,SAAeG,EAAtB,oC,4CAAO,WAA0BpC,EAA6BC,GAAvD,uBAAAvC,EAAA,sEACyBH,EAC5ByC,EACAJ,EAAOC,uBAHJ,cACCK,EADD,gBAKsB3C,EAAiB0C,EAAKL,EAAOE,oBALnD,cAKCK,EALD,uBAMsBD,QANtB,IAMsBA,OANtB,EAMsBA,EAAgBmC,cANtC,sJAMwD,GANxD,eAMChC,EAND,eAQeC,QAAQC,IAC1BF,EAAYG,IAAZ,iCAAAC,MAAgB,WAAOC,GAAP,uBAAAhD,EAAA,6EACSyC,QADT,IACSA,OADT,EACSA,EAAaQ,SAASD,EAAEE,SADjC,cACRC,EADQ,QAGRC,EAAQ,IAAIC,IAAQC,MAAM,oBAC1BC,QAAQ,SAAUP,EAAEQ,OAAOC,YAJnB,SAKIL,EAAMM,OALV,cAKRC,EALQ,OAMRC,EAAOC,KAAKC,MAAMH,EAAI,GAAGI,IAAI,SAE7BC,EAAO,CACXC,MAAOjB,EAAEiB,MAAMC,WACfV,OAAQR,EAAEQ,OAAOC,WACjBU,OAAQnB,EAAEmB,OACVC,MAAOpB,EAAEoB,MACTC,MAAOlB,EACP7B,KAAMsC,EAAI,KACVU,YAAaV,EAAI,aAfL,kBAiBPI,GAjBO,4CAAhB,wDATG,eAQCO,EARD,OA6BLC,QAAQC,IAAR,uBAA4BF,IA7BvB,kBA8BEA,GA9BF,4C,4BCrCKK,E,SCCCC,EAAiB,kBAAMC,eACvBC,EAAkDC,I,0BCFlDC,EAAkB,WAC7B,MAAwDC,qBAAxD,mBAAOC,EAAP,KAA6BC,EAA7B,KACA,EAAsCF,qBAAtC,mBAAOG,EAAP,KAAoBC,EAApB,KAaA,OAXAC,qBAAU,WACRC,IAAM,gCAAgCC,MAAK,SAACC,GAC1CN,EAAwBM,EAAI9B,MAC5BY,QAAQC,IAAI,CAAEkB,KAAMD,EAAI9B,UAE1B4B,IAAM,uBAAuBC,MAAK,SAACC,GACjCJ,EAAeI,EAAI9B,WAGpB,IAEI,CAAEuB,uBAAsBE,gB,QCOpBO,EAAW,SAAC,GAA2C,IAAzChC,EAAwC,EAAxCA,KAAwC,IAAlCiC,iBAAkC,SAC3DC,EAAWjB,IACjB,EAA8CI,IAAtCE,EAAR,EAAQA,qBAAsBE,EAA9B,EAA8BA,YAExBU,EAAW,uCAAG,gCAAA/F,EAAA,0DACdmF,IAAwBE,EADV,iCAEcxF,EAC5BsF,EACAjD,EAAOC,uBAJO,cAEVK,EAFU,OAOVyB,EAAQ7D,IAAO4F,MAAMC,YAAYrC,EAAKK,MAAO,OAPnC,SASezB,EAAe0D,iBAAiBhE,EAAOE,mBAAoBwB,EAAKJ,OAAQ,CACrG2C,MAAOlC,EAAMC,WACbkC,SAAU,UACVC,SAAU,gBAZI,cASVH,EATU,iBAcTA,EAAyBI,OAdhB,QAeZT,IACFxD,EAAS8C,EAAsBE,GAAaI,MAAK,SAAC7B,GAChDkC,EAAStE,EAAQoC,OAEnBc,EAAWS,EAAsBE,GAAaI,MAAK,SAAC7B,GAClDkC,EAASjE,EAAU+B,QApBP,4CAAH,qDA0BjB,OACE,eAAC2C,EAAA,EAAD,CAAMC,GAAI,CAAEC,SAAU,KAAtB,UACE,cAACC,EAAA,EAAD,CACEC,OACE,cAACC,EAAA,EAAD,CAAQJ,GAAI,CAAEK,QAASC,IAAI,MAAQ,aAAW,SAA9C,eAIFpF,OACE,cAACqF,EAAA,EAAD,CAAY,aAAW,WAAvB,SACE,cAAC,IAAD,MAGJC,MAAOpD,EAAKtC,OAEd,cAAC2F,EAAA,EAAD,CAAWC,UAAU,MAAMC,OAAO,MAAM9C,MAAOT,EAAKS,QACpD,cAAC+C,EAAA,EAAD,UACGvB,GAAa,cAACwB,EAAA,EAAD,oBAASjH,IAAO4F,MAAMC,YAAYrC,EAAKK,MAAO,SAA9C,YAKhB,cAACqD,EAAA,EAAD,CAAaC,gBAAc,EAA3B,SACG1B,GACC,cAAC2B,EAAA,EAAD,CAAOC,UAAU,MAAMC,QAAS,EAAhC,SACE,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS,cAACC,EAAA,EAAD,IAAkBC,QAAShC,EAAhE,yB,+BH7EAnB,K,WAAAA,M,KAIL,IAAMoD,GAAe,uCAAG,8BAAAhI,EAAA,yDACE,qBAApBC,OAAOC,SADW,yBAEND,OAAbC,EAFmB,EAEnBA,SAFmB,kBAGpB,IAAI+H,KAAK/H,IAHW,gCAKtB,MALsB,2CAAH,qDAQfgI,GAAU,uCAAG,4BAAAlI,EAAA,sEACDgI,KADC,cAClB7H,EADkB,gCAEjBA,QAFiB,IAEjBA,OAFiB,EAEjBA,EAAUgI,IAAIC,IAAIC,SAFD,2CAAH,qDIejBC,GAAW,uCAAG,gCAAAtI,EAAA,yDACa,qBAApBC,OAAOC,SADA,yBAEKD,OAAbC,EAFQ,EAERA,SAFQ,SAGOA,EAASqI,QAAQ,CAAEC,OAAQ,wBAHlC,cAGVC,EAHU,yBAITA,GAJS,gCAMX,IANW,2CAAH,qDASJC,GAAkB,uCAAG,4BAAA1I,EAAA,sEACTsI,KADS,cAC1BG,EAD0B,gBAGVP,KAHU,cAKhB,OALgB,QAM9B1D,QAAQC,IAAI,mBANkB,kBASzBgE,GATyB,2CAAH,qDAYlBE,GAAe,SAACC,GACI,qBAApB3I,OAAOC,UACKD,OAAbC,SACC2I,GAAG,gBAAgB,SAACjF,GACvBgF,GAAUA,EAASlI,SAASkD,EAAa,SC7CtCkF,GAAmB,CAC9B,CAAE9B,MAAO,SAAU+B,KAAM,GAAIC,QCFT,WACpB,IAAQ9H,EAAS6D,GAAe,SAACtD,GAAD,OAAWA,EAAMwH,UAAzC/H,KACF4E,EAAWjB,IACjB,EAA8CI,IAAtCE,EAAR,EAAQA,qBAAsBE,EAA9B,EAA8BA,YAExB6D,EAAcC,uBAAY,WAC1BhE,GAAwBE,GAC1BhD,EAAS8C,EAAsBE,GAAaI,MAAK,SAAC7B,GAChDkC,EAAStE,EAAQoC,SAGpB,CAACuB,EAAsBE,IAmB1B,OAjBAE,qBAAU,WACRmD,KAAqBjD,MAAK,SAACgD,GACrBA,GAAYA,EAAS,IACvBS,SAGH,CAACA,IAEJP,GAAY,uCAAC,WAAOS,GAAP,SAAApJ,EAAA,sDACA,OAAPoJ,GACF5E,QAAQC,IAAI,mBACZqB,EAAStE,EAAQ,MAEjB0H,IALS,2CAAD,uDAUV,cAAC7B,EAAA,EAAD,CAAKgC,EAAG,EAAG7C,GAAI,CAAE8C,SAAU,GAA3B,SACE,cAACC,EAAA,EAAD,CAAMC,WAAS,EAAC9B,QAAS,EAAzB,SACGxG,EAAK4B,KAAI,SAAC2G,EAAGzG,GAAJ,OACR,cAACuG,EAAA,EAAD,CAAMvF,MAAI,EAAC0F,GAAI,EAAf,SACE,cAAC,EAAD,CAAU9F,KAAM6F,KADKzG,YD/B/B,CAAEgE,MAAO,UAAW+B,KAAM,UAAWC,QEHjB,WACpB,IHkD6BJ,EGlDrBzH,EAAW4D,GAAe,SAACtD,GAAD,OAAWA,EAAMwH,UAA3C9H,OACF2E,EAAWjB,IACjB,EAA8CI,IAAtCE,EAAR,EAAQA,qBAAsBE,EAA9B,EAA8BA,YAExB6D,EAAcC,uBAAY,WAC1BhE,GAAwBE,GAC1BX,EAAWS,EAAsBE,GAAaI,MAAK,SAAC7B,GAClDkC,EAASjE,EAAU+B,SAGtB,CAACuB,EAAsBE,IAuB1B,OArBAE,qBAAU,WACRmD,KAAqBjD,MAAK,SAACgD,GACrBA,GAAYA,EAAS,IACvBS,SAGH,CAACA,IHgCyBN,EG9Bd,SAACe,GACdT,KH8B6B,qBAApBjJ,OAAOC,UACKD,OAAbC,SACC2I,GAAG,mBAAmB,SAACJ,GAC1BG,GAAUA,EAASH,MG9B3BE,GAAY,uCAAC,WAAOS,GAAP,SAAApJ,EAAA,sDACA,OAAPoJ,GACF5E,QAAQC,IAAI,mBACZqB,EAASjE,EAAU,MAEnBqH,IALS,2CAAD,uDAUV,cAAC7B,EAAA,EAAD,CAAKgC,EAAG,EAAG7C,GAAI,CAAE8C,SAAU,GAA3B,SACE,cAACC,EAAA,EAAD,CAAMC,WAAS,EAAC9B,QAAS,EAAzB,SACGvG,EAAO2B,KAAI,SAAC2G,EAAGzG,GAAJ,OACV,cAACuG,EAAA,EAAD,CAAMvF,MAAI,EAAC0F,GAAI,EAAf,SACE,cAAC,EAAD,CAAU9F,KAAM6F,EAAG5D,WAAW,KADT7C,a,iECfpB4G,GAAW,WACtB,MAAmFC,cAA3EC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,gBAChBjE,GADN,EAAuCkE,iBAAvC,EAAyDC,KAAzD,EAA+DC,QAA/D,EAAwEC,OACvDtF,KACjB,EAA8CI,IAAtCI,EAAR,EAAQA,YAAaF,EAArB,EAAqBA,qBAEfiF,EAAwB,CAC5B9I,KAAM+I,KAAMC,QAAQC,cACpBjG,YAAa+F,KAAMG,SAASC,qBAC5BxG,MAAO,KAET,EAAoCiB,qBAApC,mBAAOwF,EAAP,KAAmBC,EAAnB,KACQC,EAAaC,cAAbD,SAEFE,EAAY,uCAAG,sBAAA9K,EAAA,sDACf0K,GACFE,EAAUF,EAAmBpJ,KAAMoJ,EAAY,CAC7CK,KAAM,SACNC,UAAU,EACVC,UAAU,WAAD,4BAAE,WAAOC,GAAP,eAAAlL,EAAA,sDACHmL,EAAOD,EAAeE,OAExBF,GACFG,EAAWF,GAJJ,2CAAF,mDAAC,GAOVG,QAAS,SAACC,GAAD,OAAW/G,QAAQC,IAAI8G,MAZjB,2CAAH,qDAiBZF,EAAU,uCAAG,WAAOF,GAAP,yCAAAnL,EAAA,kEAEPsB,EAAsB8I,EAAtB9I,KAAMgD,EAAgB8F,EAAhB9F,aACVa,IAAwBE,EAHb,iCAIiBxF,EAC5BsF,EACAjD,EAAOC,uBANI,cAIPK,EAJO,gBAQc3C,EAAiBwF,EAAanD,EAAOE,oBARnD,cAQPK,EARO,iBAUWA,EAAY+I,UAAUL,GAVjC,eAUPK,EAVO,iBAYKA,EAAkBlF,OAZvB,eAYPmF,EAZO,OAcPC,EAAQD,EAAGE,OAAO,GAClBxF,EAAQuF,EAAME,KAAK,GACnBpI,EAAS2C,EAAM1C,WAEfG,EAAOC,KAAKgI,UAAU,CAC1BV,IAAKA,EACL7J,OACAgD,iBAGIwH,EAAM,IAAIzI,IAAQ0I,OAAO,oBAC3BC,IAAI,SAAUxI,GAClBsI,EAAIE,IAAI,OAAQpI,GA1BH,UA2BPkI,EAAIG,OA3BG,eA6BPhI,EAAQ7D,IAAO4F,MAAMkG,WAAW9B,EAAUnG,MAAO,SACvDO,QAAQC,IAAI,CAAER,UA9BD,iBAkCczB,QAlCd,IAkCcA,OAlCd,EAkCcA,EAAgB2J,kBAlC9B,eAkCPC,EAlCO,wBAoCgB5J,QApChB,IAoCgBA,OApChB,EAoCgBA,EAAgB6J,eAC3CnK,EAAOE,mBACPoB,EACAS,EAAMC,WACN,CACEiC,MAAOiG,EAAalI,aAzCX,eAoCPmI,EApCO,iBA6CNA,EAAuB/F,OA7CjB,QA+CbjE,EAAS8C,EAAsBE,GAAaI,MAAK,SAAC7B,GAChDkC,EAAStE,EAAQoC,OAGnB+G,OAAc2B,GAnDD,0DAsDf9H,QAAQC,IAAI,UAAZ,MAtDe,0DAAH,sDA8DhB,OACE,cAAC8H,GAAA,EAAD,CAAQC,SAAS,SAAjB,SACE,cAACC,GAAA,EAAD,CAAWhG,SAAS,KAApB,SACE,eAACiG,GAAA,EAAD,CAASC,gBAAc,EAAvB,UACE,cAACC,GAAA,EAAD,CAAYhF,QAAQ,KAAKiF,QAAM,EAAC3F,UAAU,MAAMV,GAAI,CAAEsG,GAAI,EAAGC,QAAS,CAAEC,GAAI,OAAQC,GAAI,SAAxF,+BAIA,cAAC5F,EAAA,EAAD,CAAKb,GAAI,CAAE8C,SAAU,EAAGyD,QAAS,CAAEC,GAAI,OAAQC,GAAI,SAAnD,SACGnE,GAAOhG,KAAI,SAACoK,GAAD,OACV,cAAC,IAAD,CAAMC,GAAE,WAAMD,EAAKnE,MAAnB,SACE,cAACpB,EAAA,EAAD,CAAQnB,GAAI,CAAE4G,GAAI,EAAGC,MAAO,QAASN,QAAS,SAA9C,SAA0DG,EAAKlG,SADjCkG,EAAKlG,YAKzC,uBAAO+D,KAAK,OAAOuC,SAnBT,SAAC7D,GACjBkB,EAAclB,EAAE8D,OAAOC,MAAM,OAmBvB,cAACnG,EAAA,EAAD,CAAKb,GAAI,CAAE8C,SAAU,EAAGyD,QAAS,CAAEC,GAAI,OAAQC,GAAI,SAAnD,SACE,cAACtF,EAAA,EAAD,CACEC,QAAQ,WACRyF,MAAM,YACN7G,GAAI,CAAE4G,GAAI,EAAGC,MAAO,QAASN,QAAS,SACtChF,QAAS+C,EAJX,uBAUF,cAACzD,EAAA,EAAD,CAAKb,GAAI,CAAE8C,SAAU,GAArB,SACE,cAACmE,GAAA,EAAD,CAASzG,MAAM,gBAAf,SACE,cAACD,EAAA,EAAD,CACEP,GAAI,CAAE6C,EAAG,GACTtB,QAAS,WACPvD,QAAQC,IAAI,0BAA2BiJ,cAElC3D,GACHD,EAAa,CAAE6D,eAAgB,yBAC5BlI,MAAK,SAAUwE,GACdzF,QAAQC,IAAI,kBAAmBwF,GAC/BzF,QAAQC,IAAR,OAAYwF,QAAZ,IAAYA,OAAZ,EAAYA,EAAMlG,IAAI,kBAEvB6J,OAAM,SAAUrC,GACf/G,QAAQC,IAAI8G,OAZtB,SAiBE,cAAC3E,EAAA,EAAD,CAAQiH,IAAI,aAAaC,IAAI,8CCjJ9BC,OAlBf,WACE,OACE,cAAC,IAAD,CACEC,UAAU,kDACVC,MAAM,2CAFR,SAIE,eAAC,IAAD,WACE,cAAC,GAAD,IACA,cAAC,IAAD,UACGnF,GAAOhG,KAAI,SAAC2G,EAAGzG,GAAJ,OACV,cAAC,IAAD,CAAe+F,KAAMU,EAAEV,KAAMC,QAASS,EAAET,WAA5BhG,cCPlBkL,GAAY7M,YAAY,CAC5BC,KAAM,OACNL,aANqC,CACrCkN,QAAQ,GAMR5M,SAAU,CACR6M,aADQ,SACK3M,EAAOC,GAClBD,EAAM0M,OAASzM,EAAOC,YAQf0M,IADmBH,GAAUnM,QAA3BqM,aACYF,GAAUjM,S,WClB/BqM,GAAQC,YAAe,CAC3BtM,QAAS,CACPuM,KAAMH,GACNpF,OAAQjH,KAIZyM,aAAeH,GAAMxI,UAENwI,UCAAI,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,gCAAqBnJ,MAAK,YAAkD,IAA/CoJ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFRO,GAAa,WACjB,OACE,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUb,MAAOA,GAAjB,SACE,cAAC,GAAD,SAMKc,IAASC,WAAWC,SAASC,eAAe,SACpDC,OAAO,cAAC,GAAD,KAKZd,M,kBCvBA,SAASe,EAAoBC,GAC5B,IAAIjG,EAAI,IAAIkG,MAAM,uBAAyBD,EAAM,KAEjD,MADAjG,EAAEmG,KAAO,mBACHnG,EAEPgG,EAAoBI,KAAO,WAAa,MAAO,IAC/CJ,EAAoBK,QAAUL,EAC9BM,EAAOC,QAAUP,EACjBA,EAAoBrG,GAAK,K","file":"static/js/main.289ea65a.chunk.js","sourcesContent":["import { ethers } from 'ethers'\n\nexport enum ChainId {\n  dev = '1337',\n  production='80001'  // matic\n}\n\nexport const getEtherContract = async (\n  contractDefinition: Record<string, any>,\n  address: string\n): Promise<ethers.Contract | null> => {\n\n  if (typeof window.ethereum !== 'undefined') {\n    const { ethereum } = window\n    const provider = new ethers.providers.Web3Provider(ethereum as any)\n\n    const network = await provider.getNetwork()\n    if (Number.parseInt(process.env.NODE_ENV === 'development' ? ChainId.dev : ChainId.production) === network.chainId) {\n      const signer = provider.getSigner()\n      const contract = new ethers.Contract(address, contractDefinition['abi'], signer)\n      return contract\n    }\n  }\n  return null\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\n// import { RootState } from '..'\r\n\r\nexport interface INFTItem {\r\n  price: string\r\n  itemId: number\r\n  seller: string\r\n  owner: string\r\n  image: any\r\n  name: any\r\n  description: any\r\n}\r\n\r\nexport interface ExporeState {\r\n  nfts: INFTItem[]\r\n  mynfts: INFTItem[]\r\n}\r\nexport const initialState: ExporeState = {\r\n  nfts: [],\r\n  mynfts: []\r\n}\r\n\r\nconst exporeSlice = createSlice({\r\n  name: 'test',\r\n  initialState,\r\n  reducers: {\r\n    setNFTs(state, action: PayloadAction<INFTItem[]>) {\r\n      state.nfts = action.payload\r\n    },\r\n    clearNFTs(state) {\r\n      state.nfts = initialState.nfts\r\n    },\r\n    setMyNFTs(state, action: PayloadAction<INFTItem[]>) {\r\n      state.mynfts = action.payload\r\n    },\r\n    clearMyNFTs(state) {\r\n      state.nfts = initialState.mynfts\r\n    }\r\n  }\r\n})\r\n\r\n// export const getToggleStatus = (state: RootState) => state.test\r\n\r\nexport const { setNFTs, clearNFTs, setMyNFTs, clearMyNFTs } = exporeSlice.actions\r\nexport const exporeReducer = exporeSlice.reducer\r\n","interface ISecret {\n  nftContractAddress: string\n  marketContractAddress: string\n}\n\nconst isDevMode = process.env.NODE_ENV === 'development'\n\nexport const config: ISecret = {\n  marketContractAddress: isDevMode ? '0x842eac76f217f4A124Cae53dDD3F0ff342384c0D' : '0x9a697b618CE0B315Bb0D72B3Cf8604ECE0A32F65',\n  nftContractAddress: isDevMode ? '0x8EC571C44A18ae4dA4b551a7544A82dC27C95a8b' : '0x7040f31b1C027FF01F038Ee466caADc7DcB5200D'\n}\n","import Moralis from 'moralis'\nimport { getEtherContract } from '../libs/ethereum'\nimport { INFTItem } from '../states/expore/reducer'\n\nimport { NFTInstance, PotatoMarketInstance } from '../../types/truffle-contracts'\nimport { config } from '../config'\n\nexport const loadNFTs = async (market: Record<string, any>, nft: Record<string, any>) => {\n  const marketContract = (await getEtherContract(\n    market,\n    config.marketContractAddress\n  )) as unknown as PotatoMarketInstance\n  const ntfContract = (await getEtherContract(nft, config.nftContractAddress)) as unknown as NFTInstance\n  const marketItems = (await marketContract?.fetchMarketItems()) ?? []\n\n  const items = await Promise.all(\n    marketItems.map(async (i) => {\n      const tokenUri = await ntfContract?.tokenURI(i.tokenId)\n\n      const query = new Moralis.Query('potatoNFTMarket')\n      query.equalTo('itemId', i.itemId.toNumber())\n      const res = await query.find()\n      const data = JSON.parse(res[0].get('data'))\n\n      const item: INFTItem = {\n        price: i.price.toString(),\n        itemId: i.itemId.toNumber(),\n        seller: i.seller,\n        owner: i.owner,\n        image: tokenUri,\n        name: data['name'],\n        description: data['description']\n      }\n      return item\n    })\n  )\n  console.log(`loadNFTs==>${items}`)\n  return items\n}\n\nexport async function loadMyNFTs(market: Record<string, any>, nft: Record<string, any>) {\n  const marketContract = (await getEtherContract(\n    market,\n    config.marketContractAddress\n  )) as unknown as PotatoMarketInstance\n  const ntfContract = (await getEtherContract(nft, config.nftContractAddress)) as unknown as NFTInstance\n  const marketItems = (await marketContract?.fetchMyNfts()) ?? []\n\n  const items = await Promise.all(\n    marketItems.map(async (i) => {\n      const tokenUri = await ntfContract?.tokenURI(i.tokenId)\n\n      const query = new Moralis.Query('potatoNFTMarket')\n      query.equalTo('itemId', i.itemId.toNumber())\n      const res = await query.find()\n      const data = JSON.parse(res[0].get('data'))\n\n      const item = {\n        price: i.price.toString(),\n        itemId: i.itemId.toNumber(),\n        seller: i.seller,\n        owner: i.owner,\n        image: tokenUri,\n        name: data['name'],\n        description: data['description']\n      }\n      return item\n    })\n  )\n  console.log(`loadMyNFTs==>${items}`)\n  return items\n}\n","import { Contract, ContractSendMethod, DeployOptions, EventData } from 'web3-eth-contract'\nimport Web3 from 'web3'\n\nexport enum contractEvent {\n  Log = 'Log'\n}\n\nexport const getWeb3Provider = async (): Promise<Web3 | null> => {\n  if (typeof window.ethereum !== 'undefined') {\n    const { ethereum } = window\n    return new Web3(ethereum as any)\n  }\n  return null\n}\n\nexport const getChainId = async (): Promise<number | undefined> => {\n  const provider = await getWeb3Provider()\n  return provider?.eth.net.getId()\n}\n\nexport const getWeb3Contract = async (\n  contractDefinition: Record<string, any>,\n  address: string\n): Promise<Contract | null> => {\n  const provider = await getWeb3Provider()\n  const networkId = await getChainId()\n  console.log({ networkId })\n\n  if (provider && networkId) {\n    const contract = new provider.eth.Contract(contractDefinition['abi'], address)\n    return contract\n  }\n  return null\n}\n\nexport const getContractEvent = (contract: Contract, event: contractEvent): Promise<EventData[]> => {\n  const options = {\n    filter: {\n      value: []\n    },\n    fromBlock: 0, //Number || \"earliest\" || \"pending\" || \"latest\"\n    toBlock: 'latest'\n  }\n  return contract.getPastEvents(event, options)\n}\n\nexport const deployContract = (contract: Contract): ContractSendMethod => {\n  const options: DeployOptions = {\n    data: '',\n    arguments: []\n  }\n  return contract.deploy(options)\n}\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport { AppDispatch, RootState } from '.'\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\r\n","import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\n\nexport const useContractJson = () => {\n  const [potatoMarketContract, setPotatoMarketContract] = useState<Record<string, unknown>>()\n  const [NFTContract, setNFTContract] = useState<Record<string, unknown>>()\n\n  useEffect(() => {\n    axios('definition/PotatoMarket.json').then((val) => {\n      setPotatoMarketContract(val.data)\n      console.log({ json: val.data })\n    })\n    axios('definition/NFT.json').then((val) => {\n      setNFTContract(val.data)\n    })\n    // fetch('definition/NFT.json')\n  }, [])\n\n  return { potatoMarketContract, NFTContract }\n}\n","import Card from '@mui/material/Card'\nimport CardHeader from '@mui/material/CardHeader'\nimport CardMedia from '@mui/material/CardMedia'\nimport CardContent from '@mui/material/CardContent'\nimport CardActions from '@mui/material/CardActions'\nimport Avatar from '@mui/material/Avatar'\nimport IconButton from '@mui/material/IconButton'\nimport { red } from '@mui/material/colors'\nimport MoreVertIcon from '@mui/icons-material/MoreVert'\nimport { Box, Button, Stack } from '@mui/material'\nimport { ShoppingCart } from '@mui/icons-material'\nimport { getEtherContract } from '../libs/ethereum'\nimport { PotatoMarketInstance } from '../../types/truffle-contracts'\nimport { ethers } from 'ethers'\nimport { INFTItem, setMyNFTs, setNFTs } from '../states/expore/reducer'\nimport { loadMyNFTs, loadNFTs } from '../services'\nimport { useAppDispatch } from '../states/hooks'\nimport { config } from '../config'\nimport { useContractJson } from '../hooks/contracts'\n\ninterface ICardItem {\n  data: INFTItem\n  isForSale?: boolean\n}\n\nexport const CardItem = ({ data, isForSale = true }: ICardItem) => {\n  const dispatch = useAppDispatch()\n  const { potatoMarketContract, NFTContract } = useContractJson()\n\n  const handleClick = async () => {\n    if (potatoMarketContract && NFTContract) {\n      const marketContract = (await getEtherContract(\n        potatoMarketContract,\n        config.marketContractAddress\n      )) as unknown as PotatoMarketInstance\n      // const ntfContract = (await getEtherContract(NFT)) as unknown as NFTInstance\n      const price = ethers.utils.formatUnits(data.price, 'wei')\n\n      const createMarketSale = await marketContract.createMarketSale(config.nftContractAddress, data.itemId, {\n        value: price.toString(),\n        gasLimit: '6721975',\n        gasPrice: '20000000000'\n      })\n      await (createMarketSale as any).wait()\n      if (isForSale) {\n        loadNFTs(potatoMarketContract, NFTContract).then((data) => {\n          dispatch(setNFTs(data))\n        })\n        loadMyNFTs(potatoMarketContract, NFTContract).then((data) => {\n          dispatch(setMyNFTs(data))\n        })\n      }\n    }\n  }\n\n  return (\n    <Card sx={{ maxWidth: 250 }}>\n      <CardHeader\n        avatar={\n          <Avatar sx={{ bgcolor: red[500] }} aria-label=\"recipe\">\n            K\n          </Avatar>\n        }\n        action={\n          <IconButton aria-label=\"settings\">\n            <MoreVertIcon />\n          </IconButton>\n        }\n        title={data.name}\n      />\n      <CardMedia component=\"img\" height=\"150\" image={data.image} />\n      <CardContent>\n        {isForSale && <Box>{`${ethers.utils.formatUnits(data.price, 'ether')} PTT`}</Box>}\n        {/* <Typography variant=\"body2\" color=\"text.secondary\">\n          {data.description}\n        </Typography> */}\n      </CardContent>\n      <CardActions disableSpacing>\n        {isForSale && (\n          <Stack direction=\"row\" spacing={2}>\n            <Button variant=\"contained\" endIcon={<ShoppingCart />} onClick={handleClick}>\n              Buy\n            </Button>\n          </Stack>\n        )}\n      </CardActions>\n    </Card>\n  )\n}\n","import { getChainId } from './web3'\n\ndeclare global {\n  interface Window {\n    ethereum?: EthereumProvider\n  }\n}\n\ninterface RequestArguments {\n  method: 'eth_requestAccounts' | 'chainChanged' | 'accountsChanged'\n  params?: unknown[] | Record<string, unknown>\n}\n\ninterface ConnectInfo {\n  chainId: string\n}\n\ntype eventMap = {\n  chainChanged: string\n  connect: ConnectInfo\n  accountsChanged: string[]\n}\n\ntype eventResult<T extends keyof eventMap> = T extends string ? string | string[] : ConnectInfo\n\nexport interface EthereumProvider {\n  request(args: RequestArguments): Promise<string[]>\n  on: <T extends keyof eventMap>(event: keyof eventMap, handler: (data: eventResult<T>) => void) => void\n}\n\nconst getMetamask = async (): Promise<string[]> => {\n  if (typeof window.ethereum !== 'undefined') {\n    const { ethereum } = window\n    const accounts = await ethereum.request({ method: 'eth_requestAccounts' })\n    return accounts\n  }\n  return []\n}\n\nexport const getMetamaskAccount = async () => {\n  const accounts = await getMetamask()\n\n  const chainId = await getChainId()\n\n  if (chainId !== 1337) {\n    console.log('incurrect chain')\n  }\n\n  return accounts\n}\n\nexport const chainChanged = (callback?: (chainId: number) => void): void => {\n  if (typeof window.ethereum !== 'undefined') {\n    const { ethereum } = window\n    ethereum.on('chainChanged', (data) => {\n      if (callback) callback(parseInt(data as any, 16))\n    })\n  }\n}\n\nexport const accountChanged = (callback?: (ac: string[]) => void): void => {\n  if (typeof window.ethereum !== 'undefined') {\n    const { ethereum } = window\n    ethereum.on('accountsChanged', (accounts) => {\n      if (callback) callback(accounts as any)\n    })\n  }\n}\n","import React from 'react'\r\nimport { Expore } from './pages/expore'\r\nimport { MyItem } from './pages/myItem'\r\n\r\ninterface IRoute {\r\n  title: string\r\n  path: string\r\n  element: any\r\n}\r\n\r\nexport const routes: IRoute[] = [\r\n  { title: 'Expore', path: '', element: Expore },\r\n  { title: 'My item', path: 'my-item', element: MyItem }\r\n]\r\n","import { Box, Grid } from '@mui/material'\nimport { useCallback, useEffect } from 'react'\nimport { CardItem } from '../components/Card'\nimport { useContractJson } from '../hooks/contracts'\nimport { chainChanged, getMetamaskAccount } from '../libs/metamask'\nimport { loadNFTs } from '../services'\nimport { setNFTs } from '../states/expore/reducer'\nimport { useAppDispatch, useAppSelector } from '../states/hooks'\n\nexport const Expore = (): JSX.Element => {\n  const { nfts } = useAppSelector((state) => state.expore)\n  const dispatch = useAppDispatch()\n  const { potatoMarketContract, NFTContract } = useContractJson()\n\n  const getNFTsData = useCallback(() => {\n    if (potatoMarketContract && NFTContract) {\n      loadNFTs(potatoMarketContract, NFTContract).then((data) => {\n        dispatch(setNFTs(data))\n      })\n    }\n  }, [potatoMarketContract, NFTContract])\n\n  useEffect(() => {\n    getMetamaskAccount().then((accounts) => {\n      if (accounts && accounts[0]) {\n        getNFTsData()\n      }\n    })\n  }, [getNFTsData])\n\n  chainChanged(async (id) => {\n    if (id !== 1337) {\n      console.log('incurrect chain')\n      dispatch(setNFTs([]))\n    } else {\n      getNFTsData()\n    }\n  })\n\n  return (\n    <Box p={4} sx={{ flexGrow: 1 }}>\n      <Grid container spacing={1}>\n        {nfts.map((e, i) => (\n          <Grid item lg={2} key={i}>\n            <CardItem data={e} />\n          </Grid>\n        ))}\n      </Grid>\n    </Box>\n  )\n}\n","import { useCallback, useEffect } from 'react'\nimport { Box, Grid } from '@mui/material'\nimport { CardItem } from '../components/Card'\nimport { accountChanged, chainChanged, getMetamaskAccount } from '../libs/metamask'\nimport { useAppDispatch, useAppSelector } from '../states/hooks'\nimport { loadMyNFTs } from '../services'\nimport { setMyNFTs } from '../states/expore/reducer'\nimport { useContractJson } from '../hooks/contracts'\n\nexport const MyItem = (): JSX.Element => {\n  const { mynfts } = useAppSelector((state) => state.expore)\n  const dispatch = useAppDispatch()\n  const { potatoMarketContract, NFTContract } = useContractJson()\n\n  const getNFTsData = useCallback(() => {\n    if (potatoMarketContract && NFTContract) {\n      loadMyNFTs(potatoMarketContract, NFTContract).then((data) => {\n        dispatch(setMyNFTs(data))\n      })\n    }\n  }, [potatoMarketContract, NFTContract])\n\n  useEffect(() => {\n    getMetamaskAccount().then((accounts) => {\n      if (accounts && accounts[0]) {\n        getNFTsData()\n      }\n    })\n  }, [getNFTsData])\n\n  accountChanged((ac) => {\n    getNFTsData()\n  })\n\n  chainChanged(async (id) => {\n    if (id !== 1337) {\n      console.log('incurrect chain')\n      dispatch(setMyNFTs([]))\n    } else {\n      getNFTsData()\n    }\n  })\n\n  return (\n    <Box p={4} sx={{ flexGrow: 1 }}>\n      <Grid container spacing={1}>\n        {mynfts.map((e, i) => (\n          <Grid item lg={2} key={i}>\n            <CardItem data={e} isForSale={false} />\n          </Grid>\n        ))}\n      </Grid>\n    </Box>\n  )\n}\n","import { useState } from 'react'\nimport AppBar from '@mui/material/AppBar'\nimport Box from '@mui/material/Box'\nimport Toolbar from '@mui/material/Toolbar'\nimport IconButton from '@mui/material/IconButton'\nimport Typography from '@mui/material/Typography'\nimport Container from '@mui/material/Container'\nimport Avatar from '@mui/material/Avatar'\nimport Button from '@mui/material/Button'\nimport Tooltip from '@mui/material/Tooltip'\nimport { ethers } from 'ethers'\nimport { faker } from '@faker-js/faker'\nimport { useMoralis, useMoralisFile } from 'react-moralis'\nimport Moralis from 'moralis'\n\nimport { PotatoMarketInstance, NFTInstance } from '../../types/truffle-contracts'\nimport { getEtherContract } from '../libs/ethereum'\nimport { Link } from 'react-router-dom'\nimport { routes } from '../routes'\nimport { useAppDispatch } from '../states/hooks'\nimport { setNFTs } from '../states/expore/reducer'\nimport { loadNFTs } from '../services'\nimport { config } from '../config'\nimport { useContractJson } from '../hooks/contracts'\n\n// const client = create({ host: 'localhost', port: 8080, protocol: 'http' })\ninterface IformInput {\n  price: string\n  name: string\n  description: string\n}\n\nexport const MyAppBar = () => {\n  const { authenticate, isAuthenticated, isAuthenticating, user, account, logout } = useMoralis()\n  const dispatch = useAppDispatch()\n  const { NFTContract, potatoMarketContract } = useContractJson()\n\n  const formInput: IformInput = {\n    name: faker.company.companyName(),\n    description: faker.commerce.productDescription(),\n    price: '2'\n  }\n  const [fileTarget, setFileTarget] = useState()\n  const { saveFile } = useMoralisFile()\n\n  const createMarket = async () => {\n    if (fileTarget) {\n      saveFile((fileTarget as any).name, fileTarget, {\n        type: 'base64',\n        saveIPFS: true,\n        onSuccess: async (result) => {\n          const url = (result as any).ipfs()\n\n          if (result) {\n            createSale(url)\n          }\n        },\n        onError: (error) => console.log(error)\n      })\n    }\n  }\n\n  const createSale = async (url: string) => {\n    try {\n      const { name, description } = formInput\n      if (potatoMarketContract && NFTContract) {\n        const marketContract = (await getEtherContract(\n          potatoMarketContract,\n          config.marketContractAddress\n        )) as unknown as PotatoMarketInstance\n        const ntfContract = (await getEtherContract(NFTContract, config.nftContractAddress)) as unknown as NFTInstance\n\n        const mintToken = await ntfContract.mintToken(url)\n\n        const tx = await (mintToken as any).wait()\n\n        const event = tx.events[0]\n        const value = event.args[2]\n        const itemId = value.toNumber()\n\n        const data = JSON.stringify({\n          url: url,\n          name,\n          description\n        })\n\n        const obj = new Moralis.Object('potatoNFTMarket')\n        obj.set('itemId', itemId)\n        obj.set('data', data)\n        await obj.save()\n\n        const price = ethers.utils.parseUnits(formInput.price, 'ether')\n        console.log({ price })\n\n        /* then list the item for sale on the marketplace */\n\n        const listingPrice = await marketContract?.getListingPrice()\n\n        const makeMarketItem = await marketContract?.makeMarketItem(\n          config.nftContractAddress,\n          itemId,\n          price.toString(),\n          {\n            value: listingPrice.toString()\n          }\n        )\n\n        await (makeMarketItem as any).wait()\n\n        loadNFTs(potatoMarketContract, NFTContract).then((data) => {\n          dispatch(setNFTs(data))\n        })\n\n        setFileTarget(undefined)\n      }\n    } catch (error) {\n      console.log('Error: ', error)\n    }\n  }\n\n  const fileInput = (e: any) => {\n    setFileTarget(e.target.files[0])\n  }\n\n  return (\n    <AppBar position=\"static\">\n      <Container maxWidth=\"xl\">\n        <Toolbar disableGutters>\n          <Typography variant=\"h6\" noWrap component=\"div\" sx={{ mr: 2, display: { xs: 'none', md: 'flex' } }}>\n            Potato NFT Market\n          </Typography>\n\n          <Box sx={{ flexGrow: 1, display: { xs: 'none', md: 'flex' } }}>\n            {routes.map((page) => (\n              <Link to={`/${page.path}`} key={page.title}>\n                <Button sx={{ my: 2, color: 'white', display: 'block' }}>{page.title}</Button>\n              </Link>\n            ))}\n          </Box>\n          <input type=\"file\" onChange={fileInput} />\n          <Box sx={{ flexGrow: 1, display: { xs: 'none', md: 'flex' } }}>\n            <Button\n              variant=\"outlined\"\n              color=\"secondary\"\n              sx={{ my: 2, color: 'white', display: 'block' }}\n              onClick={createMarket}\n            >\n              listing\n            </Button>\n          </Box>\n\n          <Box sx={{ flexGrow: 0 }}>\n            <Tooltip title=\"Open settings\">\n              <IconButton\n                sx={{ p: 0 }}\n                onClick={() => {\n                  console.log('process.env.NODE_ENV==>', process.env.NODE_ENV)\n\n                  if (!isAuthenticated) {\n                    authenticate({ signingMessage: 'Log in using Moralis' })\n                      .then(function (user) {\n                        console.log('logged in user:', user)\n                        console.log(user?.get('ethAddress'))\n                      })\n                      .catch(function (error) {\n                        console.log(error)\n                      })\n                  }\n                }}\n              >\n                <Avatar alt=\"Remy Sharp\" src=\"/static/images/avatar/2.jpg\" />\n              </IconButton>\n            </Tooltip>\n          </Box>\n        </Toolbar>\n      </Container>\n    </AppBar>\n  )\n}\n","import './style.css'\r\n\r\nimport { MoralisProvider } from 'react-moralis'\r\nimport { BrowserRouter, Route, Routes } from 'react-router-dom'\r\nimport { routes } from './routes'\r\nimport { MyAppBar } from './components/Appbar'\r\n\r\nfunction App(): JSX.Element {\r\n  return (\r\n    <MoralisProvider\r\n      serverUrl=\"https://jqffj1drjnzm.usemoralis.com:2053/server\"\r\n      appId=\"iABVUKAeoEkI52Lnjt1dZrIgHuvo62ZHKk9qNDds\"\r\n    >\r\n      <BrowserRouter>\r\n        <MyAppBar />\r\n        <Routes>\r\n          {routes.map((e, i) => (\r\n            <Route key={i} path={e.path} element={e.element()} />\r\n          ))}\r\n        </Routes>\r\n      </BrowserRouter>\r\n    </MoralisProvider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { RootState } from '..'\r\n\r\nexport interface TestState {\r\n  toogle: boolean\r\n}\r\nexport const initialState: TestState = {\r\n  toogle: false\r\n}\r\n\r\nconst testSlice = createSlice({\r\n  name: 'test',\r\n  initialState,\r\n  reducers: {\r\n    updateToggle(state, action: PayloadAction<boolean>) {\r\n      state.toogle = action.payload\r\n    }\r\n  }\r\n})\r\n\r\nexport const getToggleStatus = (state: RootState) => state.test\r\n\r\nexport const { updateToggle } = testSlice.actions\r\nexport const testReducer = testSlice.reducer\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport { exporeReducer } from './expore/reducer'\r\nimport { testReducer } from './test/reducer'\r\nimport { setupListeners } from '@reduxjs/toolkit/query/react'\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    test: testReducer,\r\n    expore: exporeReducer\r\n  }\r\n})\r\n\r\nsetupListeners(store.dispatch)\r\n\r\nexport default store\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch\r\n","import { ReportHandler } from 'web-vitals'\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler):void => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry)\r\n      getFID(onPerfEntry)\r\n      getFCP(onPerfEntry)\r\n      getLCP(onPerfEntry)\r\n      getTTFB(onPerfEntry)\r\n    })\r\n  }\r\n}\r\n\r\nexport default reportWebVitals\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom/client'\r\nimport App from './App'\r\nimport store from './states'\r\nimport reportWebVitals from './reportWebVitals'\r\nimport { Provider } from 'react-redux'\r\n\r\nconst AppWrapper = () => {\r\n  return (\r\n    <React.StrictMode>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </React.StrictMode>\r\n  )\r\n}\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root') as any)\r\nroot.render(<AppWrapper />)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 699;"],"sourceRoot":""}