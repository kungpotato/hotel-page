{"version":3,"sources":["components/Appbar.tsx","components/AppContainer.tsx","pages/Create.tsx","App.tsx","states/test/reducer.ts","states/index.ts","reportWebVitals.ts","index.tsx","config.ts","libs/ethereum.ts","states/expore/reducer.ts","hooks/contracts.tsx","services/index.ts","states/hooks.ts","../node_modules/magic-sdk/dist/es sync","hooks/screenSize.tsx"],"names":["MyAppBar","props","history","useNavigate","path","useLocation","screenWidth","useScreenSize","maxWidth","useMoralis","authenticate","isAuthenticated","user","isAuthenticating","account","logout","useEffect","id","setWalletName","address","useState","walletName","visible","setVisible","open","setOpen","HomeButton","CustomGrid","Grid","CustomImage","Image","showSidebarWallet","Menu","inverted","size","secondary","pointing","Container","fluid","Item","style","marginRight","alt","src","position","Button","icon","onClick","height","width","Input","color","placeholder","name","active","pathname","as","Popup","background","basic","content","trigger","Icon","length","display","alignItems","slice","borderRadius","border","circular","avatar","spaced","Divider","marginBottom","Sidebar","animation","direction","onHide","vertical","Modal","dimmer","onClose","onOpen","Content","Card","centered","boxShadow","Header","Row","columns","paddingBottom","Column","textAlign","signingMessage","then","get","catch","error","console","log","margin","AppContainer","children","Create","saveFile","useMoralisFile","dispatch","useAppDispatch","useContractJson","NFTContract","potatoMarketContract","formInput","faker","company","companyName","description","commerce","productDescription","price","fileTarget","setFileTarget","createMarket","a","type","saveIPFS","onSuccess","result","url","ipfs","createSale","onError","getEtherContract","config","marketContractAddress","marketContract","nftContractAddress","ntfContract","mintToken","wait","tx","event","events","value","args","itemId","toNumber","data","JSON","stringify","obj","Moralis","Object","set","save","ethers","utils","parseUnits","getListingPrice","listingPrice","makeMarketItem","toString","loadNFTs","setNFTs","undefined","onChange","e","target","files","variant","sx","my","Expore","lazy","MyItem","Loading","Progress","percent","App","serverUrl","appId","index","element","fallback","testSlice","createSlice","initialState","toogle","reducers","updateToggle","state","action","payload","testReducer","actions","reducer","store","configureStore","test","expore","exporeReducer","setupListeners","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","AppWrapper","StrictMode","ReactDOM","createRoot","document","getElementById","render","ChainId","contractDefinition","window","ethereum","provider","providers","Web3Provider","getNetwork","network","Number","parseInt","production","chainId","signer","getSigner","contract","Contract","nfts","mynfts","exporeSlice","clearNFTs","setMyNFTs","clearMyNFTs","setPotatoMarketContract","setNFTContract","axios","val","json","market","nft","fetchMarketItems","marketItems","Promise","all","map","mark","i","tokenURI","tokenId","tokenUri","query","Query","equalTo","find","res","parse","item","seller","owner","image","items","loadMyNFTs","fetchMyNfts","useDispatch","useAppSelector","useSelector","webpackEmptyContext","req","Error","code","keys","resolve","module","exports","setSize","addEventListener","isTrusted","innerWidth"],"mappings":"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","file":"static/js/main.bddfd158.chunk.js","sourcesContent":["import { Fragment, useEffect, useState } from 'react'\r\n// import AppBar from '@mui/material/AppBar'\r\n// import Box from '@mui/material/Box'\r\n// import Toolbar from '@mui/material/Toolbar'\r\n// import IconButton from '@mui/material/IconButton'\r\n// import Typography from '@mui/material/Typography'\r\n// import Container from '@mui/material/Container'\r\n// import Avatar from '@mui/material/Avatar'\r\n// import Tooltip from '@mui/material/Tooltip'\r\nimport { faker } from '@faker-js/faker'\r\nimport { useMoralis, useMoralisFile } from 'react-moralis'\r\nimport { Button, Card, Container, Dimmer, Divider, Feed, Grid, Header, Icon, Image, Input, Label, Menu, Modal, Popup, Segment, Sidebar } from 'semantic-ui-react'\r\n\r\nimport { PotatoMarketInstance, NFTInstance } from '../../types/truffle-contracts'\r\nimport { getEtherContract } from '../libs/ethereum'\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\nimport { routes } from '../routes'\r\nimport { useAppDispatch } from '../states/hooks'\r\nimport { setNFTs } from '../states/expore/reducer'\r\nimport { loadNFTs } from '../services'\r\nimport { config } from '../config'\r\nimport { useContractJson } from '../hooks/contracts'\r\nimport { Link } from 'react-router-dom'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { useScreenSize } from '../hooks/screenSize'\r\n\r\n\r\n// const client = create({ host: 'localhost', port: 8080, protocol: 'http' })\r\n\r\n\r\nexport const MyAppBar = (props: any) => {\r\n  const history = useNavigate()\r\n  const path = useLocation()\r\n  const screenWidth = useScreenSize({ maxWidth: 1000 })\r\n  const { authenticate, isAuthenticated, isAuthenticating, user, account, logout } = useMoralis()\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if (isAuthenticated && user && user.id) {\r\n      setWalletName(user && user.id ? user.id : '')\r\n    }\r\n  }, [isAuthenticated, user])\r\n\r\n\r\n\r\n  const [walletName, setWalletName] = useState('')\r\n\r\n  const [visible, setVisible] = useState(false)\r\n\r\n  const [open, setOpen] = useState(false)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const HomeButton = (path: string) => {\r\n    history(path)\r\n  }\r\n\r\n  const openConnectWalletModal = () => {\r\n    if (walletName.length === 0) {\r\n      setOpen(!open)\r\n    }\r\n  }\r\n\r\n  const connectWallet = () => {\r\n    if (!isAuthenticated) {\r\n      authenticate({ signingMessage: 'Log in using Moralis' })\r\n        .then(function (user) {\r\n          if (user) {\r\n            const address = user.get('ethAddress')\r\n            setWalletName(address && address.id ? address.id : '')\r\n            setOpen(false)\r\n          }\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error)\r\n        })\r\n    }\r\n  }\r\n\r\n  const CustomGrid = Grid as any\r\n\r\n  const CustomImage = Image as any\r\n\r\n  const addressSec = (address: string) => {\r\n    const first = address.slice(0, 2)\r\n    const sec = address.slice(address.length - 4)\r\n    return first + '...' + sec\r\n  }\r\n\r\n  const showSidebarWallet = () => {\r\n    setVisible(!visible)\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Menu inverted={true} size='huge' secondary pointing>\r\n        <Container fluid={true} >\r\n          <Menu.Item >\r\n            <img style={{ marginRight: '8px' }} alt=\"logo\" src='/images/potato.gif' />\r\n            Potato NFT\r\n          </Menu.Item>\r\n          {screenWidth && <Menu.Item position='right'>\r\n            <Button inverted icon='sidebar' onClick={showSidebarWallet} />\r\n          </Menu.Item>}\r\n          {!screenWidth && <Fragment>\r\n            <Menu.Item style={{ height: '100%', width: '40%' }}>\r\n              <Input inverted fluid style={{ color: '#000' }} icon='search' placeholder='Search items, collections, and accounts' />\r\n            </Menu.Item>\r\n            <Menu.Menu position='right'>\r\n              <Menu.Item style={{ height: '100%' }}\r\n                name='Expore'\r\n                onClick={() => HomeButton('/expore')}\r\n                active={path.pathname === '/expore'}\r\n              />\r\n              <Menu.Item style={{ height: '100%' }}\r\n                name='Myitem'\r\n                onClick={() => HomeButton('/myitem')}\r\n                active={path.pathname === '/myitem'}\r\n              />\r\n              <Menu.Item style={{ height: '100%' }}\r\n                name='Create'\r\n                onClick={() => HomeButton('/create')}\r\n                active={path.pathname === '/create'}\r\n              />\r\n              <Menu.Item as='a' style={{ height: '100%' }}>\r\n                <Popup style={{ background: 'var(--main-background)' }} basic content='Dark Mode' trigger={<Icon name='sun outline' />} />\r\n              </Menu.Item>\r\n              {walletName.length === 0 && <Menu.Item as='a'>\r\n                <Button style={{ display: \"flex\", alignItems: \"center\", background: 'var(--main-gradient)', color: '#fff' }} onClick={openConnectWalletModal}>\r\n                  {walletName && walletName.length > 0 && <Icon name='ethereum' />}\r\n                  {walletName && walletName.length > 0 ? addressSec(walletName) : 'Connect Wallet'}\r\n                </Button>\r\n              </Menu.Item>}\r\n              <Menu.Item as='a'>\r\n                {walletName && walletName.length > 0 &&\r\n                  <div style={{ borderRadius: '50%', border: '1px solid #ffffff38', width: '45px' }}>\r\n                    <CustomImage size='mini' style={{ background: 'var(--main-gradient)', color: '#fff', width: '45px' }} circular avatar spaced='right' src={`https://robohash.org/${walletName}.jpeg?set=set1&size=150x150`} />\r\n                  </div>\r\n                }\r\n              </Menu.Item>\r\n              <Menu.Item as='a' style={{ height: '100%' }} onClick={showSidebarWallet}>\r\n                {walletName && walletName.length > 0 &&\r\n                  <div style={{ width: '32px' }}>\r\n                    <CustomImage size='mini' style={{ width: '32px' }} spaced='right' src='/images/wallet.webp' />\r\n                  </div>\r\n                }\r\n              </Menu.Item>\r\n            </Menu.Menu>\r\n          </Fragment>}\r\n        </Container>\r\n      </Menu>\r\n      <Divider inverted style={{ marginBottom: \"0\" }} />\r\n\r\n\r\n      <Sidebar\r\n        as={Menu}\r\n        animation='overlay'\r\n        direction='right'\r\n\r\n        icon='labeled'\r\n        inverted\r\n        onHide={() => setVisible(false)}\r\n        vertical\r\n        visible={visible}\r\n        width='thin'\r\n      >\r\n        <Menu.Item as='a'>\r\n          <Icon name='home' />\r\n          Home\r\n        </Menu.Item>\r\n        <Menu.Item as='a'>\r\n          <Icon name='gamepad' />\r\n          Games\r\n        </Menu.Item>\r\n        <Menu.Item as='a'>\r\n          <Icon name='camera' />\r\n          Channels\r\n        </Menu.Item>\r\n        <Menu.Item as='a'>\r\n          <Icon name='camera' />\r\n          Channels\r\n        </Menu.Item>\r\n        <Menu.Item as='a'>\r\n          <Icon name='camera' />\r\n          Channels\r\n        </Menu.Item>\r\n        <Menu.Item as='a'>\r\n          <Icon name='camera' />\r\n          Channels\r\n        </Menu.Item>\r\n        <Menu.Item as='a'>\r\n          <Icon name='camera' />\r\n          Channels\r\n        </Menu.Item>\r\n      </Sidebar>\r\n\r\n\r\n\r\n\r\n      <Modal\r\n        basic\r\n        dimmer='blurring'\r\n        onClose={() => setOpen(false)}\r\n        onOpen={() => setOpen(true)}\r\n        open={open}\r\n        size='small'\r\n      >\r\n        <Modal.Content>\r\n          <Card centered={true} style={{ boxShadow: 'none', background: \"#0000\" }} >\r\n            <Card.Content style={{ background: 'var(--main-gradient)' }}>\r\n              <Card.Header style={{ color: '#fff' }}>Connect Wallet</Card.Header>\r\n            </Card.Content>\r\n            <Card.Content style={{ background: '#383241' }}>\r\n              <CustomGrid >\r\n                <Grid.Row columns={2} style={{ paddingBottom: '0' }}>\r\n                  <Grid.Column style={{ textAlign: 'center' }}>\r\n                    <Button icon style={{ width: \"85px\", height: '85px', background: \"#0000\" }} onClick={connectWallet}>\r\n                      <div style={{ display: \"block\" }}>\r\n                        <img style={{ display: \"block\", margin: 'auto', marginBottom: '8px' }} src=\"/images/wallert_metamask.webp\" alt=\"\" />\r\n                        Metamask\r\n                      </div>\r\n                    </Button>\r\n                  </Grid.Column>\r\n                  <Grid.Column style={{ textAlign: 'center' }}>\r\n                    <Button icon style={{ width: \"85px\", height: '85px', background: \"#0000\" }}>\r\n                      <div style={{ display: \"block\" }}>\r\n                        <img style={{ display: \"block\", margin: 'auto', marginBottom: '8px' }} src=\"/images/binance_wallet.webp\" alt=\"\" />\r\n                        Binance\r\n                      </div>\r\n                    </Button>\r\n                  </Grid.Column>\r\n                </Grid.Row>\r\n                <Grid.Row columns={2}>\r\n                  <Grid.Column style={{ textAlign: 'center' }}>\r\n                    <Button icon style={{ width: \"85px\", height: '85px', background: \"#0000\" }}>\r\n                      <div style={{ display: \"block\" }}>\r\n                        <img style={{ display: \"block\", margin: 'auto', marginBottom: '8px' }} src=\"/images/wallet_connect.webp\" alt=\"\" />\r\n                        Wallet\r\n                      </div>\r\n                    </Button>\r\n                  </Grid.Column>\r\n                </Grid.Row>\r\n\r\n              </CustomGrid>\r\n            </Card.Content>\r\n          </Card>\r\n        </Modal.Content>\r\n        {/* <Modal.Actions>\r\n          <Button basic color='red' inverted onClick={() => setOpen(false)}>\r\n            <Icon name='remove' /> No\r\n          </Button>\r\n          <Button color='green' inverted onClick={() => setOpen(false)}>\r\n            <Icon name='checkmark' /> Yes\r\n          </Button>\r\n        </Modal.Actions> */}\r\n      </Modal>\r\n    </Fragment>\r\n    // <AppBar position=\"static\">\r\n    //   <Container maxWidth=\"xl\">\r\n    //     <Toolbar disableGutters>\r\n    //       <Typography variant=\"h6\" noWrap component=\"div\" sx={{ mr: 2, display: { xs: 'none', md: 'flex' } }}>\r\n    //         Potato NFT Market\r\n    //       </Typography>\r\n\r\n    //       <Box sx={{ flexGrow: 1, display: { xs: 'none', md: 'flex' } }}>\r\n    //           {\r\n    //   routes.map((page) => (\r\n    //     <Link to={`/${page.path}`} key={page.title}>\r\n    //       <Button sx={{ my: 2, color: 'white', display: 'block' }}>{page.title}</Button>\r\n    //     </Link>\r\n    //   ))\r\n    // }\r\n    //       </Box>\r\n    //       <input type=\"file\" onChange={fileInput} />\r\n    //       <Box sx={{ flexGrow: 1, display: { xs: 'none', md: 'flex' } }}>\r\n    //         {/* <Button\r\n    //           variant=\"outlined\"\r\n    //           color=\"secondary\"\r\n    //           sx={{ my: 2, color: 'white', display: 'block' }}\r\n    //           onClick={createMarket}\r\n    //         >\r\n    //           listing\r\n    //         </Button> */}\r\n    //       </Box>\r\n\r\n    //       <Box sx={{ flexGrow: 0 }}>\r\n    //         <Tooltip title=\"Open settings\">\r\n    //           <IconButton\r\n    //             sx={{ p: 0 }}\r\n    //             onClick={() => {\r\n    //               console.log('process.env.NODE_ENV==>', process.env.NODE_ENV)\r\n\r\n    //               if (!isAuthenticated) {\r\n    //                 authenticate({ signingMessage: 'Log in using Moralis' })\r\n    //                   .then(function (user) {\r\n    //                     console.log('logged in user:', user)\r\n    //                     console.log(user?.get('ethAddress'))\r\n    //                   })\r\n    //                   .catch(function (error) {\r\n    //                     console.log(error)\r\n    //                   })\r\n    //               }\r\n    //             }}\r\n    //           >\r\n    //             <Avatar alt=\"Remy Sharp\" src=\"/static/images/avatar/2.jpg\" />\r\n    //           </IconButton>\r\n    //         </Tooltip>\r\n    //       </Box>\r\n    //     </Toolbar>\r\n    //   </Container>\r\n    // </AppBar>\r\n  )\r\n}\r\n","import React, { Fragment } from 'react'\r\nimport { MyAppBar } from './Appbar'\r\n\r\nexport const AppContainer = ((props: { children: JSX.Element }) => {\r\n    return (\r\n        <Fragment>\r\n            <MyAppBar />\r\n            <div>{props.children}</div>\r\n        </Fragment>\r\n    )\r\n})","import faker from '@faker-js/faker'\r\nimport react, { useState } from 'react'\r\nimport { useMoralisFile } from 'react-moralis'\r\nimport { Button } from 'semantic-ui-react'\r\nimport { NFTInstance, PotatoMarketInstance } from '../../types/truffle-contracts'\r\nimport { config } from '../config'\r\nimport { useContractJson } from '../hooks/contracts'\r\nimport { getEtherContract } from '../libs/ethereum'\r\nimport Moralis from 'moralis'\r\nimport { ethers } from 'ethers'\r\nimport { loadNFTs } from '../services'\r\nimport { useAppDispatch } from '../states/hooks'\r\nimport { setNFTs } from '../states/expore/reducer'\r\n\r\n\r\ninterface IformInput {\r\n    price: string\r\n    name: string\r\n    description: string\r\n}\r\n\r\nexport const Create = (): JSX.Element => {\r\n    const { saveFile } = useMoralisFile()\r\n    const dispatch = useAppDispatch()\r\n    const { NFTContract, potatoMarketContract } = useContractJson()\r\n\r\n    const formInput: IformInput = {\r\n        name: faker.company.companyName(),\r\n        description: faker.commerce.productDescription(),\r\n        price: '2'\r\n    }\r\n\r\n    const [fileTarget, setFileTarget] = useState()\r\n\r\n    const fileInput = (e: any) => {\r\n        setFileTarget(e.target.files[0])\r\n    }\r\n\r\n    const createMarket = async () => {\r\n        if (fileTarget) {\r\n            saveFile((fileTarget as any).name, fileTarget, {\r\n                type: 'base64',\r\n                saveIPFS: true,\r\n                onSuccess: async (result) => {\r\n                    const url = (result as any).ipfs()\r\n\r\n                    if (result) {\r\n                        createSale(url)\r\n                    }\r\n                },\r\n                onError: (error) => console.log(error)\r\n            })\r\n        }\r\n    }\r\n\r\n    const createSale = async (url: string) => {\r\n        try {\r\n            const { name, description } = formInput\r\n\r\n            if (potatoMarketContract && NFTContract) {\r\n                const marketContract = (await getEtherContract(\r\n                    potatoMarketContract,\r\n                    config.marketContractAddress\r\n                )) as unknown as PotatoMarketInstance\r\n                const ntfContract = (await getEtherContract(NFTContract, config.nftContractAddress)) as unknown as NFTInstance\r\n\r\n                const mintToken = await ntfContract.mintToken(url)\r\n                const tx = await (mintToken as any).wait()\r\n\r\n                const event = tx.events[0]\r\n                const value = event.args[2]\r\n                const itemId = value.toNumber()\r\n\r\n                const data = JSON.stringify({\r\n                    url: url,\r\n                    name,\r\n                    description\r\n                })\r\n\r\n                const obj = new Moralis.Object('potatoNFTMarket')\r\n                obj.set('itemId', itemId)\r\n                obj.set('data', data)\r\n                await obj.save()\r\n\r\n                const price = ethers.utils.parseUnits(formInput.price, 'ether')\r\n\r\n                /* then list the item for sale on the marketplace */\r\n\r\n                const listingPrice = await marketContract?.getListingPrice()\r\n\r\n                const makeMarketItem = await marketContract?.makeMarketItem(\r\n                    config.nftContractAddress,\r\n                    itemId,\r\n                    price.toString(),\r\n                    {\r\n                        value: listingPrice.toString()\r\n                    }\r\n                )\r\n\r\n                await (makeMarketItem as any).wait()\r\n\r\n                loadNFTs(potatoMarketContract, NFTContract).then((data) => {\r\n                    dispatch(setNFTs(data))\r\n                })\r\n\r\n                setFileTarget(undefined)\r\n            }\r\n        } catch (error) {\r\n            console.log('Error: ', error)\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <input type=\"file\" onChange={fileInput} />\r\n\r\n        <Button\r\n            variant=\"outlined\"\r\n            sx={{ my: 2, color: 'white', display: 'block' }}\r\n            onClick={createMarket}\r\n        >\r\n            listing\r\n        </Button>\r\n    </div>\r\n}","import './style.css'\r\n\r\nimport { MoralisProvider } from 'react-moralis'\r\nimport { BrowserRouter, Route, Routes } from 'react-router-dom'\r\nimport { routes } from './routes'\r\nimport { AppContainer } from './components/AppContainer'\r\nimport { Create } from './pages/Create'\r\nimport { lazy, Suspense } from 'react'\r\nimport { Progress } from 'semantic-ui-react'\r\n\r\nconst Expore = lazy(() => import(\"./pages/Expore\"))\r\nconst MyItem = lazy(() => import(\"./pages/MyItem\"))\r\n\r\nconst Loading = <Progress percent={100} size='tiny' active />\r\n\r\nfunction App(): JSX.Element {\r\n  return (\r\n    <MoralisProvider\r\n      serverUrl=\"https://jqffj1drjnzm.usemoralis.com:2053/server\"\r\n      appId=\"iABVUKAeoEkI52Lnjt1dZrIgHuvo62ZHKk9qNDds\"\r\n    >\r\n      <BrowserRouter>\r\n        <AppContainer>\r\n          <Routes>\r\n\r\n            <Route index element={<Create />} />\r\n            <Route\r\n              path=\"/expore\"\r\n              element={\r\n                <Suspense fallback={Loading}>\r\n                  <Expore />\r\n                </Suspense>\r\n              }\r\n            />\r\n            <Route\r\n              path=\"/myitem\"\r\n              element={\r\n                <Suspense fallback={Loading}>\r\n                  <MyItem />\r\n                </Suspense>\r\n              }\r\n            />\r\n            <Route\r\n              path=\"/create\"\r\n              element={\r\n                <Suspense fallback={Loading}>\r\n                  <Create />\r\n                </Suspense>\r\n              }\r\n            />\r\n          </Routes>\r\n        </AppContainer>\r\n      </BrowserRouter>\r\n    </MoralisProvider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { RootState } from '..'\r\n\r\nexport interface TestState {\r\n  toogle: boolean\r\n}\r\nexport const initialState: TestState = {\r\n  toogle: false\r\n}\r\n\r\nconst testSlice = createSlice({\r\n  name: 'test',\r\n  initialState,\r\n  reducers: {\r\n    updateToggle(state, action: PayloadAction<boolean>) {\r\n      state.toogle = action.payload\r\n    }\r\n  }\r\n})\r\n\r\nexport const getToggleStatus = (state: RootState) => state.test\r\n\r\nexport const { updateToggle } = testSlice.actions\r\nexport const testReducer = testSlice.reducer\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport { exporeReducer } from './expore/reducer'\r\nimport { testReducer } from './test/reducer'\r\nimport { setupListeners } from '@reduxjs/toolkit/query/react'\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    test: testReducer,\r\n    expore: exporeReducer\r\n  }\r\n})\r\n\r\nsetupListeners(store.dispatch)\r\n\r\nexport default store\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>\r\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\r\nexport type AppDispatch = typeof store.dispatch\r\n","import { ReportHandler } from 'web-vitals'\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler):void => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry)\r\n      getFID(onPerfEntry)\r\n      getFCP(onPerfEntry)\r\n      getLCP(onPerfEntry)\r\n      getTTFB(onPerfEntry)\r\n    })\r\n  }\r\n}\r\n\r\nexport default reportWebVitals\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom/client'\r\nimport App from './App'\r\nimport store from './states'\r\nimport reportWebVitals from './reportWebVitals'\r\nimport { Provider } from 'react-redux'\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nconst AppWrapper = () => {\r\n  return (\r\n    <React.StrictMode>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </React.StrictMode>\r\n  )\r\n}\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root') as any)\r\nroot.render(<AppWrapper />)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n","interface ISecret {\r\n  nftContractAddress: string\r\n  marketContractAddress: string\r\n}\r\n\r\nconst isDevMode = process.env.NODE_ENV === 'development'\r\n\r\nexport const config: ISecret = {\r\n  marketContractAddress: isDevMode\r\n    ? '0xFCCF4eC444c506A766E3cc998f1719F8EBAEAd57'\r\n    : '0x9a697b618CE0B315Bb0D72B3Cf8604ECE0A32F65',\r\n  nftContractAddress: isDevMode\r\n    ? '0x4a7F81183c405bD5Cb3fc6EAAE8bbE69EB6862B1'\r\n    : '0x7040f31b1C027FF01F038Ee466caADc7DcB5200D'\r\n}\r\n","import { ethers } from 'ethers'\n\nexport enum ChainId {\n  dev = '1337',\n  production='80001'  // matic\n}\n\nexport const getEtherContract = async (\n  contractDefinition: Record<string, any>,\n  address: string\n): Promise<ethers.Contract | null> => {\n\n  if (typeof window.ethereum !== 'undefined') {\n    const { ethereum } = window\n    const provider = new ethers.providers.Web3Provider(ethereum as any)\n\n    const network = await provider.getNetwork()\n    if (Number.parseInt(process.env.NODE_ENV === 'development' ? ChainId.dev : ChainId.production) === network.chainId) {\n      const signer = provider.getSigner()\n      const contract = new ethers.Contract(address, contractDefinition['abi'], signer)\n      return contract\n    }\n  }\n  return null\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\n// import { RootState } from '..'\r\n\r\nexport interface INFTItem {\r\n  price: string\r\n  itemId: number\r\n  seller: string\r\n  owner: string\r\n  image: any\r\n  name: any\r\n  description: any\r\n}\r\n\r\nexport interface ExporeState {\r\n  nfts: INFTItem[]\r\n  mynfts: INFTItem[]\r\n}\r\nexport const initialState: ExporeState = {\r\n  nfts: [],\r\n  mynfts: []\r\n}\r\n\r\nconst exporeSlice = createSlice({\r\n  name: 'test',\r\n  initialState,\r\n  reducers: {\r\n    setNFTs(state, action: PayloadAction<INFTItem[]>) {\r\n      state.nfts = action.payload\r\n    },\r\n    clearNFTs(state) {\r\n      state.nfts = initialState.nfts\r\n    },\r\n    setMyNFTs(state, action: PayloadAction<INFTItem[]>) {\r\n      state.mynfts = action.payload\r\n    },\r\n    clearMyNFTs(state) {\r\n      state.nfts = initialState.mynfts\r\n    }\r\n  }\r\n})\r\n\r\n// export const getToggleStatus = (state: RootState) => state.test\r\n\r\nexport const { setNFTs, clearNFTs, setMyNFTs, clearMyNFTs } = exporeSlice.actions\r\nexport const exporeReducer = exporeSlice.reducer\r\n","import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\n\nexport const useContractJson = () => {\n  const [potatoMarketContract, setPotatoMarketContract] = useState<Record<string, unknown>>()\n  const [NFTContract, setNFTContract] = useState<Record<string, unknown>>()\n\n  useEffect(() => {\n    axios('definition/PotatoMarket.json').then((val) => {\n      setPotatoMarketContract(val.data)\n      console.log({ json: val.data })\n    })\n    axios('definition/NFT.json').then((val) => {\n      setNFTContract(val.data)\n    })\n    // fetch('definition/NFT.json')\n  }, [])\n\n  return { potatoMarketContract, NFTContract }\n}\n","import Moralis from 'moralis'\nimport { getEtherContract } from '../libs/ethereum'\nimport { INFTItem } from '../states/expore/reducer'\n\nimport { NFTInstance, PotatoMarketInstance } from '../../types/truffle-contracts'\nimport { config } from '../config'\n\nexport const loadNFTs = async (market: Record<string, any>, nft: Record<string, any>) => {\n  const marketContract = (await getEtherContract(\n    market,\n    config.marketContractAddress\n  )) as unknown as PotatoMarketInstance\n  const ntfContract = (await getEtherContract(nft, config.nftContractAddress)) as unknown as NFTInstance\n  const marketItems = (await marketContract?.fetchMarketItems()) ?? []\n\n  const items = await Promise.all(\n    marketItems.map(async (i) => {\n      const tokenUri = await ntfContract?.tokenURI(i.tokenId)\n\n      const query = new Moralis.Query('potatoNFTMarket')\n      query.equalTo('itemId', i.itemId.toNumber())\n      const res = await query.find()\n      const data = JSON.parse(res[0].get('data'))\n\n      const item: INFTItem = {\n        price: i.price.toString(),\n        itemId: i.itemId.toNumber(),\n        seller: i.seller,\n        owner: i.owner,\n        image: tokenUri,\n        name: data['name'],\n        description: data['description']\n      }\n      return item\n    })\n  )\n  console.log(`loadNFTs==>${items}`)\n  return items\n}\n\nexport async function loadMyNFTs(market: Record<string, any>, nft: Record<string, any>) {\n  const marketContract = (await getEtherContract(\n    market,\n    config.marketContractAddress\n  )) as unknown as PotatoMarketInstance\n  const ntfContract = (await getEtherContract(nft, config.nftContractAddress)) as unknown as NFTInstance\n  const marketItems = (await marketContract?.fetchMyNfts()) ?? []\n\n  const items = await Promise.all(\n    marketItems.map(async (i) => {\n      const tokenUri = await ntfContract?.tokenURI(i.tokenId)\n\n      const query = new Moralis.Query('potatoNFTMarket')\n      query.equalTo('itemId', i.itemId.toNumber())\n      const res = await query.find()\n      const data = JSON.parse(res[0].get('data'))\n\n      const item = {\n        price: i.price.toString(),\n        itemId: i.itemId.toNumber(),\n        seller: i.seller,\n        owner: i.owner,\n        image: tokenUri,\n        name: data['name'],\n        description: data['description']\n      }\n      return item\n    })\n  )\n  console.log(`loadMyNFTs==>${items}`)\n  return items\n}\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport { AppDispatch, RootState } from '.'\r\n\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\r\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 667;","import React, { useEffect, useState } from 'react'\r\n\r\nexport const useScreenSize = ({ maxWidth }: { maxWidth: number }) => {\r\n    const [size, setSize] = useState(false)\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"resize\", (res) => {\r\n            if (res.isTrusted) {\r\n                if (maxWidth > window.innerWidth) {\r\n                    setSize(true)\r\n                } else {\r\n                    setSize(false)\r\n                }\r\n            }\r\n        })\r\n    }, [window, maxWidth, size])\r\n    return size\r\n}"],"sourceRoot":""}