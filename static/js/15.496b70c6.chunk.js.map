{"version":3,"sources":["components/Card.tsx","libs/web3.ts","libs/metamask.ts","pages/MyItem.tsx"],"names":["Image","styled","img","Header","Card","whiteSpace","overflow","textOverflow","Meta","Price","Description","p","color","textAlign","CardItem","data","isForSale","image","price","name","description","owner","isAuthenticated","useMoralis","dispatch","useAppDispatch","useContractJson","potatoMarketContract","NFTContract","handleClick","a","getEtherContract","config","marketContractAddress","marketContract","ethers","utils","formatUnits","createMarketSale","nftContractAddress","itemId","value","toString","gasLimit","gasPrice","wait","loadNFTs","then","setNFTs","loadMyNFTs","setMyNFTs","style","height","width","onClick","src","loading","Content","extra","display","justifyContent","alignItems","size","background","padding","icon","defaultRating","maxRating","contractEvent","getWeb3Provider","window","ethereum","Web3","getChainId","provider","eth","net","getId","getMetamask","request","method","accounts","getMetamaskAccount","console","log","chainChanged","callback","on","parseInt","accountChanged","MyItem","mynfts","useAppSelector","state","expore","getNFTsData","useCallback","useEffect","ac","id","sx","flexGrow","container","spacing","map","e","i","item","lg"],"mappings":"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","file":"static/js/15.496b70c6.chunk.js","sourcesContent":["import { getEtherContract } from '../libs/ethereum'\nimport { PotatoMarketInstance } from '../../types/truffle-contracts'\nimport { ethers } from 'ethers'\nimport { INFTItem, setMyNFTs, setNFTs } from '../states/expore/reducer'\nimport { loadMyNFTs, loadNFTs } from '../services'\nimport { useAppDispatch } from '../states/hooks'\nimport { config } from '../config'\nimport { useContractJson } from '../hooks/contracts'\nimport { Button, Card, Icon, Rating } from 'semantic-ui-react'\nimport styled from '@emotion/styled'\nimport { useMoralis } from 'react-moralis'\n\nconst Image = styled.img`\n  display: block;\n  width: 100%;\n  height: 14em;\n  border-radius: inherit;\n  object-fit: cover;\n`\n\nconst Header = styled(Card.Header)({\n  whiteSpace: 'nowrap',\n  overflow: 'hidden',\n  textOverflow: 'ellipsis'\n})\n\nconst Meta = styled(Card.Meta)({\n  whiteSpace: 'nowrap',\n  overflow: 'hidden',\n  textOverflow: 'ellipsis'\n})\n\nconst Description = styled(Card.Description)({\n  whiteSpace: 'nowrap',\n  overflow: 'hidden',\n  textOverflow: 'ellipsis'\n})\n\nconst Price = styled.p({\n  whiteSpace: 'nowrap',\n  overflow: 'hidden',\n  textOverflow: 'ellipsis',\n  color: '#2185d0',\n  textAlign: 'right'\n})\n\ninterface ICardItem {\n  data: INFTItem\n  isForSale?: boolean\n}\n\nexport const CardItem = ({ data, isForSale = true }: ICardItem) => {\n  const { image, price, description, name, owner } = data\n  const { isAuthenticated } = useMoralis()\n\n  const dispatch = useAppDispatch()\n  const { potatoMarketContract, NFTContract } = useContractJson()\n\n  const handleClick = async () => {\n    if (potatoMarketContract && NFTContract) {\n      const marketContract = (await getEtherContract(\n        potatoMarketContract,\n        config.marketContractAddress\n      )) as unknown as PotatoMarketInstance\n      // const ntfContract = (await getEtherContract(NFT)) as unknown as NFTInstance\n      const price = ethers.utils.formatUnits(data.price, 'wei')\n\n      const createMarketSale = await marketContract.createMarketSale(config.nftContractAddress, data.itemId, {\n        value: price.toString(),\n        gasLimit: '6721975',\n        gasPrice: '20000000000'\n      })\n      await (createMarketSale as any).wait()\n      if (isForSale) {\n        loadNFTs(potatoMarketContract, NFTContract, isAuthenticated).then((data) => {\n          dispatch(setNFTs(data))\n        })\n        loadMyNFTs(potatoMarketContract, NFTContract).then((data) => {\n          dispatch(setMyNFTs(data))\n        })\n      }\n    }\n  }\n\n  return (\n    <Card style={{ height: '23em', width: '100%' }} onClick={() => false}>\n      <Image src={image} loading=\"lazy\" />\n      <Card.Content style={{ height: '1em' }}>\n        <Header>{name}</Header>\n        <Meta>{owner}</Meta>\n        <Price>\n          <Icon name=\"ethereum\" />\n          {price}\n        </Price>\n      </Card.Content>\n      <Card.Content extra>\n        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n          <Button\n            color=\"green\"\n            size=\"small\"\n            onClick={handleClick}\n            style={{ background: '#0000', color: 'green', padding: '0' }}\n          >\n            Buy now\n          </Button>\n          <div style={{ display: 'flex', alignItems: 'center' }}>\n            <span style={{ color: '#00000026', textAlign: 'right' }}>0</span>\n            <Rating icon=\"heart\" defaultRating={0} maxRating={1} />\n          </div>\n        </div>\n      </Card.Content>\n    </Card>\n  )\n}\n","import { Contract, ContractSendMethod, DeployOptions, EventData } from 'web3-eth-contract'\nimport Web3 from 'web3'\n\nexport enum contractEvent {\n  Log = 'Log'\n}\n\nexport const getWeb3Provider = async (): Promise<Web3 | null> => {\n  if (typeof window.ethereum !== 'undefined') {\n    const { ethereum } = window\n    return new Web3(ethereum as any)\n  }\n  return null\n}\n\nexport const getChainId = async (): Promise<number | undefined> => {\n  const provider = await getWeb3Provider()\n  return provider?.eth.net.getId()\n}\n\nexport const getWeb3Contract = async (\n  contractDefinition: Record<string, any>,\n  address: string\n): Promise<Contract | null> => {\n  const provider = await getWeb3Provider()\n  const networkId = await getChainId()\n  console.log({ networkId })\n\n  if (provider && networkId) {\n    const contract = new provider.eth.Contract(contractDefinition['abi'], address)\n    return contract\n  }\n  return null\n}\n\nexport const getContractEvent = (contract: Contract, event: contractEvent): Promise<EventData[]> => {\n  const options = {\n    filter: {\n      value: []\n    },\n    fromBlock: 0, //Number || \"earliest\" || \"pending\" || \"latest\"\n    toBlock: 'latest'\n  }\n  return contract.getPastEvents(event, options)\n}\n\nexport const deployContract = (contract: Contract): ContractSendMethod => {\n  const options: DeployOptions = {\n    data: '',\n    arguments: []\n  }\n  return contract.deploy(options)\n}\n","import { getChainId } from './web3'\n\ndeclare global {\n  interface Window {\n    ethereum?: EthereumProvider\n  }\n}\n\ninterface RequestArguments {\n  method: 'eth_requestAccounts' | 'chainChanged' | 'accountsChanged'\n  params?: unknown[] | Record<string, unknown>\n}\n\ninterface ConnectInfo {\n  chainId: string\n}\n\ntype eventMap = {\n  chainChanged: string\n  connect: ConnectInfo\n  accountsChanged: string[]\n}\n\ntype eventResult<T extends keyof eventMap> = T extends string ? string | string[] : ConnectInfo\n\nexport interface EthereumProvider {\n  request(args: RequestArguments): Promise<string[]>\n  on: <T extends keyof eventMap>(event: keyof eventMap, handler: (data: eventResult<T>) => void) => void\n}\n\nconst getMetamask = async (): Promise<string[]> => {\n  if (typeof window.ethereum !== 'undefined') {\n    const { ethereum } = window\n    const accounts = await ethereum.request({ method: 'eth_requestAccounts' })\n    return accounts\n  }\n  return []\n}\n\nexport const getMetamaskAccount = async () => {\n  const accounts = await getMetamask()\n\n  const chainId = await getChainId()\n\n  if (chainId !== 1337) {\n    console.log('incurrect chain')\n  }\n\n  return accounts\n}\n\nexport const chainChanged = (callback?: (chainId: number) => void): void => {\n  if (typeof window.ethereum !== 'undefined') {\n    const { ethereum } = window\n    ethereum.on('chainChanged', (data) => {\n      if (callback) callback(parseInt(data as any, 16))\n    })\n  }\n}\n\nexport const accountChanged = (callback?: (ac: string[]) => void): void => {\n  if (typeof window.ethereum !== 'undefined') {\n    const { ethereum } = window\n    ethereum.on('accountsChanged', (accounts) => {\n      if (callback) callback(accounts as any)\n    })\n  }\n}\n","import { useCallback, useEffect } from 'react'\r\nimport { Box, Grid } from '@mui/material'\r\nimport { CardItem } from '../components/Card'\r\nimport { accountChanged, chainChanged, getMetamaskAccount } from '../libs/metamask'\r\nimport { useAppDispatch, useAppSelector } from '../states/hooks'\r\nimport { loadMyNFTs } from '../services'\r\nimport { setMyNFTs } from '../states/expore/reducer'\r\nimport { useContractJson } from '../hooks/contracts'\r\n\r\nconst MyItem: React.FC = () => {\r\n  const { mynfts } = useAppSelector((state) => state.expore)\r\n  const dispatch = useAppDispatch()\r\n  const { potatoMarketContract, NFTContract } = useContractJson()\r\n\r\n  const getNFTsData = useCallback(() => {\r\n    if (potatoMarketContract && NFTContract) {\r\n      loadMyNFTs(potatoMarketContract, NFTContract).then((data) => {\r\n        dispatch(setMyNFTs(data))\r\n      })\r\n    }\r\n  }, [potatoMarketContract, NFTContract])\r\n\r\n  useEffect(() => {\r\n    getMetamaskAccount().then((accounts) => {\r\n      if (accounts && accounts[0]) {\r\n        getNFTsData()\r\n      }\r\n    })\r\n  }, [getNFTsData])\r\n\r\n  accountChanged((ac) => {\r\n    getNFTsData()\r\n  })\r\n\r\n  chainChanged(async (id) => {\r\n    if (id !== 1337) {\r\n      console.log('incurrect chain')\r\n      dispatch(setMyNFTs([]))\r\n    } else {\r\n      getNFTsData()\r\n    }\r\n  })\r\n  return (\r\n    <Box p={4} sx={{ flexGrow: 1 }}>\r\n      <Grid container spacing={1}>\r\n        {mynfts.map((e, i) => (\r\n          <Grid item lg={2} key={i}>\r\n            <CardItem data={e} isForSale={false} />\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default MyItem\r\n"],"sourceRoot":""}